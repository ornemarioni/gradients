#Author: Alejandro Benitez Llambay
#Use this file to read simulation files generated by Gadget. For any question or 
#comment just contact me at bllalejandro@gmail.com.

import numpy as np

class Open(object):
	'''
    Use this for reading files generated by Gadget.
	'''
	def __init__(self, inputfile, gadget_type = 2, endian = 'Little', verbose = 'False'):
        
		self.endian  = endian
		self.verbose = verbose
		
		if(self.endian == 'Little'):
			self.dtype_int32   = '<i'
			self.dtype_int64   = '<l'
			self.dtype_float32 = '<f'
			self.dtype_float64 = '<d'
		else:
			self.dtype_int32   = '>i'
			self.dtype_int64   = '>l'
			self.dtype_float32 = '>f'
			self.dtype_float64 = '>d'

		self.inputfile = inputfile
		self.gadget_type = gadget_type

		self.fi = open(self.inputfile,'r')

		#Let's build the dictionary of properties and 
                #determine the Offsets
		if(self.gadget_type == 2):		
			self.__Offset_type2()
		else:
			self.__Offset_type1()

		self.__read_header()		

	def __Offset_type2(self):
		
		self.Offset = {}
		self.Property = []
		offset = 0
		while(True):
			nob0  = np.fromfile(self.fi,
				           dtype = self.dtype_int32,
				           count = 1)
			HEAD = np.fromfile(self.fi,
				          dtype = ('S4'),
				          count = 1)
			NB   = np.fromfile(self.fi,
				          dtype = self.dtype_int32,
				          count = 1)
			nob1 = np.fromfile(self.fi,
				           dtype = self.dtype_int32,
				           count = 1)
			if(nob1 != nob0): print ('Something is wrong with the fortran format!')
			if(np.size(NB) == 0):
				break			
			if(self.verbose): print (HEAD, NB)
			self.Property.append(HEAD[0])
			self.Offset[HEAD[0]] = offset+16
			offset = offset+16+int(NB)
			self.fi.seek(offset,0)

	def __Offset_type1(self):
		self.Offset = {}
		self.Property = []
		offset = 0
		h = 0
		prop_num = 0
		HEAD = ['HEAD', 'POS ', 'VEL ', 
                        'ID  ', 'MASS', 'U   ', 
                        'RHO ', 'HSML', 'POT ',]
#                        'ACCE', 'ENDT', 'TSTP']
		while(True):
			nob0  = np.fromfile(self.fi,
				           dtype = self.dtype_int32,
				           count = 1)
			if(np.size(nob0) == 0):
				break		
			if(h < np.size(HEAD)):
				self.Property.append(HEAD[h])
			else:
				self.Property.append('PR'+str('%02d'% prop_num))
				prop_num += 1
			self.Offset[self.Property[h]] = offset
			if(self.verbose): print (self.Property[h], self.Offset[self.Property[h]])
			offset = offset+8+int(nob0)
			self.fi.seek(offset,0)
			h += 1

					
	def __read_header(self):
		self.fi.seek(self.Offset['HEAD'],0)
		nob0  = np.fromfile(self.fi,
                                   dtype = self.dtype_int32,
                                   count = 1)
		self.npart = np.fromfile(self.fi, dtype=self.dtype_int32, count = 6)
		self.masses = np.fromfile(self.fi, dtype=self.dtype_float64, count = 6)
		self.time = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.redshift = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.flagsfr = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.flagfeedback = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.nall = np.fromfile(self.fi, dtype=self.dtype_int32, count = 6)
		self.flagcooling = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.numfiles = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.boxsize = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.omega0 = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.omegal = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.hubble = np.fromfile(self.fi, dtype=self.dtype_float64, count = 1)
		self.flagage = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.flagmetals = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)
		self.nallhw = np.fromfile(self.fi, dtype=self.dtype_int32, count = 6)
		self.flag_entr = np.fromfile(self.fi, dtype=self.dtype_int32, count = 1)

	def Read(self, prop, ptype):
		if( (prop == 'POS ') or (prop == 'VEL ')):
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ( 'Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): pos = np.ndarray([3*self.nall[ptype]],dtype=np.float32)
					offset = self.Offset[prop]+3*4*np.sum(self.npart[0:ptype])
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					pos_loc = np.fromfile(self.fi, 
					                      dtype = self.dtype_float32,
					                      count = 3*self.npart[ptype])
					pos[poffset:poffset+3*self.npart[ptype]] = pos_loc
					poffset += 3*self.npart[ptype]
				return np.reshape(pos, [3,self.nall[ptype]], order='F')
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]+3*4*np.sum(self.npart[0:ptype])
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				pos   = np.fromfile(self.fi, 
					           dtype = self.dtype_float32,
					           count = 3*self.npart[ptype])
				return np.reshape(pos, [3,self.nall[ptype]], order='F')
		if( prop == 'ID  ' ):
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): ids = np.ndarray([self.nall[ptype]],dtype=np.int32)
					offset = self.Offset[prop]+4*np.sum(self.npart[0:ptype])
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					id_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_int32,
					                    count = self.npart[ptype])
					ids[poffset:poffset+self.npart[ptype]] = id_loc
					poffset += self.npart[ptype]
				return ids
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]+4*np.sum(self.npart[0:ptype])
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				ids   = np.fromfile(self.fi, 
				 	            dtype = self.dtype_int32,
					            count = self.npart[ptype])
				return ids						
		if( prop == 'MASS' ):
			k_eq   = np.where(self.masses == 0)[0]
			k_noeq = np.where(self.masses != 0)[0]

			for i in k_noeq:
				if(ptype == i): 
					return self.masses[i]*np.ones(self.nall[ptype], dtype=np.float32)

			for j in range(np.size(k_eq)):
				if(ptype == k_eq[j]): ptype1 = j

			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): mass = np.ndarray([self.nall[ptype]], dtype=np.float32)
					offset = self.Offset[prop]+4*np.sum(self.npart[k_eq[0:ptype1]])
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					mass_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					mass[poffset:poffset+self.npart[ptype]] = mass_loc
					poffset += self.npart[ptype]
				return mass
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]+4*np.sum(self.npart[k_eq[0:ptype1]])
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				mass   = np.fromfile(self.fi, 
				  	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return mass						
		if( (prop == 'U   ') or (prop == 'RHO ') or (prop == 'HSML') or (prop == 'NE  ') or (prop == 'NH  ') or (prop == 'SFR ') ):
			ptype = 0
			if(self.verbose): print ('You have selected ', prop, '.', 'It forces the particle type to be 0 (gas).')
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): u = np.ndarray([self.nall[ptype]],dtype=np.float32)
					offset = self.Offset[prop]
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					u_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					u[poffset:poffset+self.npart[ptype]] = u_loc
					poffset += self.npart[ptype]
				return u
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				u     = np.fromfile(self.fi, 
				 	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return u		
		if( (prop == 'AGE ') ):
			ptype = 4
			if(self.verbose): print ('You have selected ', prop, '.', 'It forces the particle type to be 4 (stars).')
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): u = np.ndarray([self.nall[ptype]],dtype=np.float32)
					offset = self.Offset[prop]
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					u_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					u[poffset:poffset+self.npart[ptype]] = u_loc
					poffset += self.npart[ptype]
				return u
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				u     = np.fromfile(self.fi, 
				 	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return u		
		if( (prop == 'Z   ') ):
			if( (ptype != 0) and (ptype != 4) ):
				if(self.verbose): 
					print ('You have selected ', prop, '.', 'It forces the particle type to be 0 (gas) or 4 (stars).')
					print ('Particle type is selected to be 4 by default')
				ptype = 4
			
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): u = np.ndarray([self.nall[ptype]],dtype=np.float32)
					if(ptype == 0):
						offset = self.Offset[prop]
					else:
						offset = self.Offset[prop]+4*self.npart[0]
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					u_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					u[poffset:poffset+self.npart[ptype]] = u_loc
					poffset += self.npart[ptype]
				return u
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				if(ptype == 0):
					offset = self.Offset[prop]
				else:
					offset = self.Offset[prop]+4*self.npart[0]
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				u     = np.fromfile(self.fi, 
				 	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return u		
		if( prop == 'POT ' ):
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): pot = np.ndarray([self.nall[ptype]],dtype=np.float32)
					offset = self.Offset[prop]+4*np.sum(self.npart[0:ptype])
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					pot_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					pot[poffset:poffset+self.npart[ptype]] = pot_loc
					poffset += self.npart[ptype]
				return pot
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]+4*np.sum(self.npart[0:ptype])
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				pot   = np.fromfile(self.fi, 
				 	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return pot
		
		if( (prop != 'POS ') & (prop != 'VEL ') & (prop != 'ID  ') & (prop != 'MASS') &
                    (prop != 'U   ') & (prop != 'RHO ') & (prop != 'HSML') & (prop != 'NE  ') & 
                    (prop != 'NH  ') & (prop != 'SFR ') & (prop != 'AGE ') & (prop != 'Z   ') &
                    (prop != 'POT ') ):
			if(self.numfiles[0] > 1):
				poffset = 0	
				for i in xrange(self.numfiles[0]):
					inputfile = self.inputfile[:-1]+str('%d'% i)
					if(self.verbose): print ('Reading file ', inputfile)
					self.fi = open(inputfile,'r')
					if(self.gadget_type == 2):
						self.__Offset_type2()
					else:
						self.__Offset_type1()
					self.__read_header()				

					if(i == 0): pot = np.ndarray([self.nall[ptype]],dtype=np.float32)
					offset = self.Offset[prop]
					self.fi.seek(offset,0)
					nob0  = np.fromfile(self.fi,
							    dtype = self.dtype_int32,
							    count = 1)
					pot_loc = np.fromfile(self.fi, 
					                    dtype = self.dtype_float32,
					                    count = self.npart[ptype])
					pot[poffset:poffset+self.npart[ptype]] = pot_loc
					poffset += self.npart[ptype]
				return pot
			else:
				inputfile = self.inputfile
				if(self.verbose): print ('Reading file ', inputfile)
				self.fi = open(inputfile,'r')
				if(self.gadget_type == 2):
					self.__Offset_type2()
				else:
					self.__Offset_type1()
				self.__read_header()				

				offset = self.Offset[prop]
				self.fi.seek(offset,0)
				nob0  = np.fromfile(self.fi,
						    dtype = self.dtype_int32,
						    count = 1)
				pot   = np.fromfile(self.fi, 
				 	            dtype = self.dtype_float32,
					            count = self.npart[ptype])
				return pot
 









